/**
 * @fileoverview Rule to enforce declarations in program or function body root.
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
<<<<<<< HEAD
// Rule Definition
//------------------------------------------------------------------------------

=======
<<<<<<< HEAD
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const validParent = new Set(["Program", "StaticBlock", "ExportNamedDeclaration", "ExportDefaultDeclaration"]);
const validBlockStatementParent = new Set(["FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"]);

/**
 * Finds the nearest enclosing context where this rule allows declarations and returns its description.
 * @param {ASTNode} node Node to search from.
 * @returns {string} Description. One of "program", "function body", "class static block body".
 */
function getAllowedBodyDescription(node) {
    let { parent } = node;

    while (parent) {

        if (parent.type === "StaticBlock") {
            return "class static block body";
        }

        if (astUtils.isFunction(parent)) {
            return "function body";
        }

        ({ parent } = parent);
    }

    return "program";
}

/** @type {import('../shared/types').Rule} */
=======
// Rule Definition
//------------------------------------------------------------------------------

>>>>>>> 421bc8df ( Fix: configuration files)
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
module.exports = {
    meta: {
        type: "problem",

        docs: {
<<<<<<< HEAD
=======
<<<<<<< HEAD
            description: "Disallow variable or `function` declarations in nested blocks",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/no-inner-declarations"
=======
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
            description: "disallow variable or `function` declarations in nested blocks",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-inner-declarations"
<<<<<<< HEAD
=======
>>>>>>> 421bc8df ( Fix: configuration files)
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
        },

        schema: [
            {
                enum: ["functions", "both"]
<<<<<<< HEAD
            }
        ]
=======
<<<<<<< HEAD
            },
            {
                type: "object",
                properties: {
                    blockScopedFunctions: {
                        enum: ["allow", "disallow"]
                    }
                },
                additionalProperties: false
            }
        ],

        messages: {
            moveDeclToRoot: "Move {{type}} declaration to {{body}} root."
        }
=======
            }
        ]
>>>>>>> 421bc8df ( Fix: configuration files)
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
    },

    create(context) {

<<<<<<< HEAD
=======
<<<<<<< HEAD
        const sourceCode = context.sourceCode;
        const ecmaVersion = context.languageOptions.ecmaVersion;
        const blockScopedFunctions = context.options[1]?.blockScopedFunctions ?? "allow";
=======
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
        /**
         * Find the nearest Program or Function ancestor node.
         * @returns {Object} Ancestor's type and distance from node.
         */
        function nearestBody() {
            const ancestors = context.getAncestors();
            let ancestor = ancestors.pop(),
                generation = 1;

            while (ancestor && ["Program", "FunctionDeclaration",
                "FunctionExpression", "ArrowFunctionExpression"
            ].indexOf(ancestor.type) < 0) {
                generation += 1;
                ancestor = ancestors.pop();
            }

            return {

                // Type of containing ancestor
                type: ancestor.type,

                // Separation between ancestor and node
                distance: generation
            };
        }
<<<<<<< HEAD
=======
>>>>>>> 421bc8df ( Fix: configuration files)
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0

        /**
         * Ensure that a given node is at a program or function body's root.
         * @param {ASTNode} node Declaration node to check.
         * @returns {void}
         */
        function check(node) {
<<<<<<< HEAD
=======
<<<<<<< HEAD
            const parent = node.parent;

            if (
                parent.type === "BlockStatement" && validBlockStatementParent.has(parent.parent.type)
            ) {
                return;
            }

            if (validParent.has(parent.type)) {
                return;
            }

            context.report({
                node,
                messageId: "moveDeclToRoot",
                data: {
                    type: (node.type === "FunctionDeclaration" ? "function" : "variable"),
                    body: getAllowedBodyDescription(node)
                }
            });
        }


        return {

            FunctionDeclaration(node) {
                const isInStrictCode = sourceCode.getScope(node).upper.isStrict;

                if (blockScopedFunctions === "allow" && ecmaVersion >= 2015 && isInStrictCode) {
                    return;
                }

                check(node);
            },
=======
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
            const body = nearestBody(),
                valid = ((body.type === "Program" && body.distance === 1) ||
                    body.distance === 2);

            if (!valid) {
                context.report({
                    node,
                    message: "Move {{type}} declaration to {{body}} root.",
                    data: {
                        type: (node.type === "FunctionDeclaration" ? "function" : "variable"),
                        body: (body.type === "Program" ? "program" : "function body")
                    }
                });
            }
        }

        return {

            FunctionDeclaration: check,
<<<<<<< HEAD
=======
>>>>>>> 421bc8df ( Fix: configuration files)
>>>>>>> c36f9991e2dbbd453d7a1e0d08a2e99a3685e7b0
            VariableDeclaration(node) {
                if (context.options[0] === "both" && node.kind === "var") {
                    check(node);
                }
            }

        };

    }
};
